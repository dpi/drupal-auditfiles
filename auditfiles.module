<?php
/**
 * @file
 * This is the main code file, containing the various hooks used by the module.
 *
 * Audit Files carries out a simple audit of the Drupal files directory and the
 * file_managed and file_usage database tables.
 */

/**
 * Implements hook_help().
 */
function auditfiles_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/config/auditfiles':
      $output = t('You may choose to exclude specific files, paths and
        extensions from the "Not in database" audit report by adding them to the
        relevant lists below.');
      break;

    case 'admin/help#auditfiles':
      $output = '<p>';
      $output .= t('The Audit Files module performs an audit of the file tables
          and the files directory to check for inconsistencies.');
      $output .= '</p>';
      break;

    case 'admin/reports/auditfiles':
      $output = '<p>';
      $output .= t('The files listed below are in the files directory on
        the server but appear to have no corresponding entry in the
        file_managed database table. Files in "temporary" folders such as those
        created by the image module are included in order to check that they are
        not filling up. You can choose to delete files on this report, but
        remember that if you do that, the action cannot be undone. You can also
        add files to the file_managed table - you might do that, if you have
        uploaded files outside of Drupal (e.g., by FTP) and will be attaching
        them to nodes through other tools.');
      $output .= '</p><p>';
      $output .= t(
        'The files in this list are using the %scheme scheme and are relative to
        the files directory %path path.',
        array(
          '%scheme' => file_default_scheme(),
          '%path' => file_default_scheme(),
        )
      );
      $output .= '</p>';
      // If on a confirmation form then suppress the help message.
      if (array_key_exists('operation', $_POST) && $_POST['operation'] == 'delete' && array_key_exists('files', $_POST)) {
        $output = '';
      }
      break;

    case 'admin/reports/auditfiles/notonserver':
      $output = '<p>';
      $output .= t('The files listed below are in the file_managed database
        table but the physical files do not exist on the server. This might mean
        the file has been deleted using a program such as FTP, or it may mean
        there is an error in the database.');
      $output .= '</p><p>';
      $output .= t('You should determine if the file is still being used or not
        and either replace the missing file or delete the references to it from
        the database.');
      $output .= '</p><p>';
      $output .= t(
        'Files in this list are relative to the files directory %path.',
        array('%path' => file_default_scheme())
      );
      $output .= '</p>';
      break;

    // @todo
    // The next two items need more information.
    case 'admin/reports/auditfiles/managednotused':
      $output = '<p>';
      $output .= t('The files listed below are in the file_managed
        database table but not in the file_usage table. Usually, this is normal
        and acceptable. This report exists for completeness, so you may verify
        that what is listed here is correct.');
      $output .= '</p><p>';
      $output .= t(
        'Files in this list are relative to the files directory %path.',
        array('%path' => file_default_scheme())
      );
      $output .= '</p>';
      break;

    case 'admin/reports/auditfiles/usednotmanaged':
      $output = '<p>';
      $output .= t('The files listed below are in the file_usage database
        table, but not in the file_managed table. Files listed here have had
        their Drupal management removed, but are still being listed as used
        somewhere.');
      $output .= '</p><p>';
      $output .= t("You should verify the file's existence in the server and in
        the objects it is listed as being used in, and either delete the
        reference in the report below, or add it to the file_managed table.");
      $output .= '</p><p>';
      $output .= t(
        'Files in this list are relative to the files directory %path.',
        array('%path' => file_default_scheme())
      );
      $output .= '</p>';
      break;

    case 'admin/reports/auditfiles/references':
      $output = '<p>';
      $output .= t('Listed here are file references embedded in node
        bodies which do not have exact correspondences in the {file_managed} and
        {file_usage} tables. If there is a file in the {file_managed} table with
        a corresponding base name, it is listed. Scenarios are:
        <ul><li><strong>No match at all in the {file_managed} table.</strong> Go
        to <strong>Files not in database</strong> and make sure any files that
        exist have been added to the database. If they have, you should either
        find and upload the missing file and run this report again, or remove
        the reference from the node.</li>
        <li><strong>Multiple matches in the {file_managed} table.</strong> This
        can happen when the same filename is in multiple directories in the
        uploded file hierarchy. You can review the alternate files and delete
        any that are true duplicates. When different files have the same
        basename, you can select the one that goes with the given node and
        choose <strong>Attach selected files</strong>. This will rewrite the
        reference in the node to use the canonical relative URL to the file, and
        if necessary, add the reference to the {file_usage} table.</li>
        <li><strong>A single match in the {file_managed} table.</strong> You can
        make the attachments between these nodes and the corresponding files
        one-by-one by selecting them and choosing <strong>Attach selected
        files</strong>, or automatically apply it to all single-match cases with
        <strong>Attach all unique matches</strong>.</li></ul>');
      $output .= '</p><p>';
      $output .= t(
        'Files in this list are relative to the files directory %path.',
        array('%path' => file_default_scheme())
      );
      $output .= '</p>';
      break;

    case 'admin/reports/auditfiles/unreferenced':
      $output = '<p>';
      $output .= t('The files listed below are in the {file_managed}
        table but no nodes are recorded as referencing them (i.e., there\'s no
        entry in the {file_usage} table). This might mean the node has been
        deleted without deleting the file, or that the files were uploaded by
        some means other than the upload module (e.g., FTP) and the
        relationships between files and nodes have not been made. If you have
        used the <strong>Missing references</strong> report and accounted for
        all files that should be referenced, and are sure that the files below
        are not needed, you may delete them. Click on the basename to get a list
        of all nodes referencing that base filename (the <strong>Missing
        references</strong> report only identifies <strong>&lt;img&gt;</strong>
        and <strong>window.open</strong> references, this may help you identify
        if the file is referenced by another means).');
      $output .= '</p><p>';
      $output .= t(
        'Files in this list are relative to the files directory %path.',
        array('%path' => file_default_scheme())
      );
      $output .= '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function auditfiles_permission() {
  return array(
    'access audit files reports' => array(
      'title' => t("Access Audit Files' reports"),
      'description' => t('Allow access to the reports generated by the Audit Files module.'),
    ),
    'administer audit files' => array(
      'title' => t('Administer Audit Files'),
      'description' => t('Configure the administration settings for the Audit Files module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function auditfiles_menu() {
  $items = array();

  // Configure the settings for this module.
  $items['admin/config/system/auditfiles'] = array(
    'title' => 'Audit Files',
    'description' => 'Set file, extension and path exclusions for file audits.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auditfiles_admin_settings'),
    'access arguments' => array('administer audit files'),
    'file' => 'auditfiles.admin.inc',
  );

  // The various reports.
  $items['admin/reports/auditfiles'] = array(
    'title' => 'Audit Files',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auditfiles_not_in_database_form'),
    'access arguments' => array('access audit files reports'),
    'file' => 'auditfiles.notindatabase.inc',
    'description' => 'Lists files that have inconsistent or incomplete implementations.',
  );
  $items['admin/reports/auditfiles/notindatabase'] = array(
    'title' => 'Not in database',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'description' => 'Lists files that are on the server, but are not in the database.',
  );
  $items['admin/reports/auditfiles/notonserver'] = array(
    'title' => 'Not on server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auditfiles_not_on_server_form'),
    'access arguments' => array('access audit files reports'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'auditfiles.notonserver.inc',
    'weight' => -5,
    'description' => 'Lists files that are in the database, but are not on the server.',
  );

  $items['admin/reports/auditfiles/managednotused'] = array(
    'title' => 'Managed not used',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auditfiles_managed_not_used_form'),
    'access arguments' => array('access audit files reports'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'auditfiles.managednotused.inc',
    'weight' => -3,
    'description' => 'Lists files that are in the file_manage table, but not in the file_usage table.',
  );
  $items['admin/reports/auditfiles/usednotmanaged'] = array(
    'title' => 'Used not managed',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auditfiles_used_not_managed_form'),
    'access arguments' => array('access audit files reports'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'auditfiles.usednotmanaged.inc',
    'weight' => -1,
    'description' => 'Lists files that are in the file_usage table, but not in the file_manage table.',
  );

  $items['admin/reports/auditfiles/usednotreferenced'] = array(
    'title' => 'Used not referenced',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auditfiles_used_not_referenced_form'),
    'access arguments' => array('access audit files reports'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'auditfiles.usednotreferenced.inc',
    'weight' => 1,
    'description' => 'List files that are in the database, but are not referenced by any node.',
  );
  $items['admin/reports/auditfiles/referencednotused'] = array(
    'title' => 'Referenced not used',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('auditfiles_referenced_not_used_form'),
    'access arguments' => array('access audit files reports'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'auditfiles.referencednotused.inc',
    'weight' => 3,
    'description' => 'List files referenced by nodes, but not properly linked or attached.',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function auditfiles_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_action_info().
 */
function auditfiles_action_info() {
  return array(
    'auditfiles_merge_files' => array(
      'type' => 'file',
      'label' => t('Merge file references'),
      'configurable' => TRUE,
      'triggers' => array('any'),
      'vbo_configurable' => FALSE,
      'aggregate' => TRUE,
      'permissions' => array('administer files'),
    ),
  );
}

/**
 * The form definition for allowing the user to choose which file to keep.
 */
function auditfiles_merge_files_form($settings, &$form_state) {
  $form = array();
  foreach ($form_state['selection'] as $file_id) {
    $file = file_load($file_id);
    // Create the options array for display in the form.
    $files[$file_id] = t(
      'File ID: !fileid; Name: !filename; URI: !fileuri; MIME: !filemime; Size: !filesize; Time uploaded: !timestamp',
      array(
        '!fileid' => $file_id,
        '!filename' => $file->filename,
        '!fileuri' => $file->uri,
        '!filemime' => $file->filemime,
        '!filesize' => $file->filesize,
        '!timestamp' => $file->timestamp,
      )
    );
  }
  // Default to sorting by file ID.
  natsort($files);
  $form['file_being_kept'] = array(
    '#type' => 'radios',
    '#title' => t('Which file will be the one the others are merged into'),
    '#default_value' => key($files),
    '#options' => $files,
  );
  return $form;
}

/**
 * The submit handler for the auditfiles_merge_files_form() function.
 */
function auditfiles_merge_files_submit($form, $form_state) {
  $ret_val = array();
  $ret_val['file_being_kept'] = $form_state['values']['file_being_kept'];
  return $ret_val;
}

/**
 * Merges selected files.
 *
 * This function takes all files given it and changes all their usages to point
 * to the initial file, then removes their reference for all but the first file
 * from the file managed table and then also removes the files from the file
 * system.
 *
 * This function does not verify that the files are actually duplicates. The
 * assumption is made that the user has already done that.
 *
 * @param arary $files
 *   An array of file objects, keyed by file ID.
 * @param array $context
 *   The context the action is executed in.
 */
function auditfiles_merge_files(&$files, $context) {
  // Make sure that more than one file was selected.
  if (count($files) > 1) {
    // Get the first file out of the array, as a reference and so it is not
    // deleted.
    $keeper = $files[$context['file_being_kept']];
    unset($files[$context['file_being_kept']]);
    // Iterate through the rest of the files in the array.
    foreach ($files as $file) {
      // Make all file usages for all files point to the first fid.
      db_update('file_usage')
        ->fields(array('fid' => $keeper->fid))
        ->condition('fid', $file->fid)
        ->execute();
      // Delete the unnecessary entries from the file_manage table.
      db_delete('file_managed')
        ->condition('fid', $file->fid)
        ->execute();
      // Delete the duplicate files.
      file_unmanaged_delete($file->uri);
    }
  }
  else {
    $message = t('More than one file must be selected in order to merge them. No changes were made.');
    drupal_set_message($message, 'warning');
  }
}
